/*
 * This is the algorithm for calculating CRC8.
 * How to use it:
 * 		1. static uint8_t table[256]; // define a variable which will store a 256 bytes table
 * 		2. generate_table(YOUR_CRC8_POLYNOMIAL, table); //  generate CRC8 table
 * 		3. uint8_t crc8 = crc_table(your_data, your_data_length, table); // use the given data to calculate CRC8
 * OR you can call crc_bitwise(your_data, your_data_length, YOUR_CRC8_POLYNOMIAL) function to calculate directly
 * to save memory but slower.
 *
 * By default, the CRC8_POLYNOMIAL = 0xe7 which is near optimal at all length of 120 and above.
 * Reference: http://users.ece.cmu.edu/~koopman/crc/index.html
 */
#ifndef CRC8__H
#define CRC8__H

#ifdef __cplusplus
extern "C" {
#endif

#include <stdint.h>
#include <stdlib.h> // size_t

#ifndef CRC8_POLYNOMIAL
#define CRC8_POLYNOMIAL (uint8_t)0xe7
#endif

#define USE_CRC8_TABLE

#if defined(__AVR__)
#include <avr/pgmspace.h>
#define	PGM_READ_BYTE(data)	pgm_read_byte(&(data))
#endif

#ifndef PROGMEM
#define PROGMEM
#endif

#ifndef PGM_READ_BYTE
#define PGM_READ_BYTE(data)	data
#endif

#ifdef USE_CRC8_TABLE
static const uint8_t crcTable[256] PROGMEM = {
0x00, 0xE7, 0x29, 0xCE, 0x52, 0xB5, 0x7B, 0x9C, 0xA4, 0x43, 0x8D, 0x6A,
0xF6, 0x11, 0xDF, 0x38, 0xAF, 0x48, 0x86, 0x61, 0xFD, 0x1A, 0xD4, 0x33,
0x0B, 0xEC, 0x22, 0xC5, 0x59, 0xBE, 0x70, 0x97, 0xB9, 0x5E, 0x90, 0x77,
0xEB, 0x0C, 0xC2, 0x25, 0x1D, 0xFA, 0x34, 0xD3, 0x4F, 0xA8, 0x66, 0x81,
0x16, 0xF1, 0x3F, 0xD8, 0x44, 0xA3, 0x6D, 0x8A, 0xB2, 0x55, 0x9B, 0x7C,
0xE0, 0x07, 0xC9, 0x2E, 0x95, 0x72, 0xBC, 0x5B, 0xC7, 0x20, 0xEE, 0x09,
0x31, 0xD6, 0x18, 0xFF, 0x63, 0x84, 0x4A, 0xAD, 0x3A, 0xDD, 0x13, 0xF4,
0x68, 0x8F, 0x41, 0xA6, 0x9E, 0x79, 0xB7, 0x50, 0xCC, 0x2B, 0xE5, 0x02,
0x2C, 0xCB, 0x05, 0xE2, 0x7E, 0x99, 0x57, 0xB0, 0x88, 0x6F, 0xA1, 0x46,
0xDA, 0x3D, 0xF3, 0x14, 0x83, 0x64, 0xAA, 0x4D, 0xD1, 0x36, 0xF8, 0x1F,
0x27, 0xC0, 0x0E, 0xE9, 0x75, 0x92, 0x5C, 0xBB, 0xCD, 0x2A, 0xE4, 0x03,
0x9F, 0x78, 0xB6, 0x51, 0x69, 0x8E, 0x40, 0xA7, 0x3B, 0xDC, 0x12, 0xF5,
0x62, 0x85, 0x4B, 0xAC, 0x30, 0xD7, 0x19, 0xFE, 0xC6, 0x21, 0xEF, 0x08,
0x94, 0x73, 0xBD, 0x5A, 0x74, 0x93, 0x5D, 0xBA, 0x26, 0xC1, 0x0F, 0xE8,
0xD0, 0x37, 0xF9, 0x1E, 0x82, 0x65, 0xAB, 0x4C, 0xDB, 0x3C, 0xF2, 0x15,
0x89, 0x6E, 0xA0, 0x47, 0x7F, 0x98, 0x56, 0xB1, 0x2D, 0xCA, 0x04, 0xE3,
0x58, 0xBF, 0x71, 0x96, 0x0A, 0xED, 0x23, 0xC4, 0xFC, 0x1B, 0xD5, 0x32,
0xAE, 0x49, 0x87, 0x60, 0xF7, 0x10, 0xDE, 0x39, 0xA5, 0x42, 0x8C, 0x6B,
0x53, 0xB4, 0x7A, 0x9D, 0x01, 0xE6, 0x28, 0xCF, 0xE1, 0x06, 0xC8, 0x2F,
0xB3, 0x54, 0x9A, 0x7D, 0x45, 0xA2, 0x6C, 0x8B, 0x17, 0xF0, 0x3E, 0xD9,
0x4E, 0xA9, 0x67, 0x80, 0x1C, 0xFB, 0x35, 0xD2, 0xEA, 0x0D, 0xC3, 0x24,
0xB8, 0x5F, 0x91, 0x76};
#endif

void generate_table (uint8_t polynomial, uint8_t table[256]);
uint8_t crc_table (uint8_t* data, size_t length, const uint8_t table[256]);
uint8_t crc_bitwise (uint8_t* data, size_t length, uint8_t polynomial);

/*
 * set PRINT_CRC8_TABLE if you want to use a static table instead of generating
 * one during running time
 */

#define PRINT_CRC8_TABLE 0

#if PRINT_CRC8_TABLE == 1

#ifndef CRC8_PRINT
#error	"You have to instantiate CRC8_PRINT to show CRC8 table!"
#endif

void print_generate_table (uint8_t polynomial);
#endif /* CRC8__H */

#ifdef __cplusplus
} // extern "C"
#endif

#endif
